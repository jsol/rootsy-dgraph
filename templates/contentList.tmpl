{{define "contentList" }}
<div id ="cl" class="contentList">
{{range .}}


  <div class="contentListItem">
<a href="/content/{{ .Uid }}/{{ toUrl .Name }}" >
  <div class="cheader cheader-{{ .Type }}">{{ typeText .Type }} </div>
  <img src="{{ .Pic }}">
  <div class="innerItem">
  <h4>{{ .Name }}</h4>
  <div class="leadin">
  {{ clearMarkers .LeadInText   }}
  </div>
  <div class="fade-out">&nbsp;

  <div class="writtenBy">{{ range .WrittenBy }} {{.Name }} {{ end }}</div>

  </div>
  </div>
  </a>
  </div>

{{end}}
  </div>
  <div id="more">
    <div class ="extender"></div>
    Laddar mer
  </div>

  <script>
    async function loadMore() {
      const res = await fetch("/api/content/extra")
      const items = await res.json()
      const $cl = document.getElementById("cl")
      const $co = $cl.querySelector(".contentListItem")
      for (const i of items) {
        const $c = $co.cloneNode(true)
        $c.querySelector("h4").innerHTML = i.name
        $c.querySelector("a").href = i.url
        $c.querySelector("img").src = i.pic
        $c.querySelector(".leadin").innerHTML = i.lead_in_text
        $c.querySelector(".writtenBy").innerHTML = i.written_by

        $header = $c.querySelector(".cheader")
        $header.classList.value= ""
        $header.innerHTML = i.type_text
        $header.classList.add("cheader-" + i.type)
        $header.classList.add("cheader")
        $cl.append($c)
      }
    }

    const obs = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) {
        loadMore()
      }
    })
    obs.observe(document.getElementById("more"))
  </script>
{{end}}
